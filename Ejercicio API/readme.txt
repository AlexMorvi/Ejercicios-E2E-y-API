INSTRUCCIONES PASO A PASO PARA EJECUTAR LAS PRUEBAS DE API PETSTORE CON KARATE
================================================================================

PRERREQUISITOS
--------------
‚úì Java 11
‚úì Maven 3.9.9
‚úì Conexi√≥n a internet (para acceder a la API de PetStore)

INSTALACIONES COMPLETADAS AUTOM√ÅTICAMENTE:
- Java JDK: C:\Program Files\Eclipse Adoptium\jdk-11.0.28.6-hotspot
- Maven: C:\Maven\apache-maven-3.9.9
- Variables de entorno configuradas para el usuario actual

VERIFICACI√ìN DE PRERREQUISITOS
------------------------------
Ejecutar los siguientes comandos en PowerShell para verificar las instalaciones:

java -version
mvn -version

ESTRUCTURA DEL PROYECTO
-----------------------
petstore-api-tests/
‚îú‚îÄ‚îÄ pom.xml                              # Configuraci√≥n Maven con dependencias de Karate
‚îú‚îÄ‚îÄ src/test/java/petstore/
‚îÇ   ‚îú‚îÄ‚îÄ PetStoreRunner.java             # Clase runner para ejecutar los tests
‚îÇ   ‚îú‚îÄ‚îÄ karate-config.js                # Configuraci√≥n base de Karate
‚îÇ   ‚îî‚îÄ‚îÄ petstore-tests.feature          # Archivo con todos los escenarios de prueba
‚îú‚îÄ‚îÄ readme.txt                          # Este archivo
‚îî‚îÄ‚îÄ conclusiones.txt                    # Hallazgos y conclusiones

PASOS PARA EJECUTAR LAS PRUEBAS
-------------------------------

1. NAVEGAR AL DIRECTORIO DEL PROYECTO
   Abrir PowerShell y navegar a la carpeta del proyecto:
   cd "c:\Users\ariel.morales\Documents\GitHub\Ejercicios-E2E-y-API\Ejercicio API"

2. INSTALAR DEPENDENCIAS
   Ejecutar el siguiente comando para descargar las dependencias de Maven:
   mvn clean compile

3. EJECUTAR TODAS LAS PRUEBAS
   Para ejecutar todos los escenarios de prueba:
   mvn test

4. EJECUTAR CON REPORTES DETALLADOS
   Para generar reportes HTML detallados:
   mvn test -Dkarate.options="--tags ~@ignore"

5. VER RESULTADOS
   Los resultados se mostrar√°n en la consola y tambi√©n se generar√°n reportes HTML en:
   target/karate-reports/

DESCRIPCI√ìN DE LOS ESCENARIOS DE PRUEBA
---------------------------------------

Los tests implementan 4 escenarios INDEPENDIENTES siguiendo patrones est√°ndar de API testing:

üìã COMPORTAMIENTO EST√ÅNDAR DE LA API:
La API de PetStore sigue patrones REST est√°ndar:
- GET a un ID inexistente: Retorna 404 (Pet not found)
- Los pets deben crearse expl√≠citamente usando POST /pet
- Los tests siguen el patr√≥n est√°ndar de setup ‚Üí ejecuci√≥n ‚Üí validaci√≥n
- Cada test crea sus propios datos de prueba para garantizar independencia

TEST 1: A√±adir una mascota a la tienda (@addPet)
- Endpoint: POST /pet
- Entrada: JSON con datos completos generados din√°micamente
- ID √∫nico: Generado usando timestamp para evitar conflictos
- Variables: petId, petName, categoryName, tagName generados autom√°ticamente
- Validaciones: ID, nombre, status, categor√≠a devueltos correctamente
- Salida: Mascota creada exitosamente con respuesta HTTP 200

TEST 2: Consultar mascota por ID - Patr√≥n est√°ndar (@getPetById)
- Setup: Crea un pet usando POST /pet con datos de prueba espec√≠ficos
- Endpoint: GET /pet/{petId}
- Comportamiento: Consulta el pet previamente creado en el mismo escenario
- Validaciones: Verifica que los datos devueltos coincidan exactamente con los creados
- Salida: Pet consultado exitosamente con validaci√≥n completa de datos

TEST 3: Actualizar el nombre de la mascota y el estatus a "sold" (@updatePet)
- Endpoint: PUT /pet  
- Entrada: JSON con datos actualizados din√°micamente
- Precondici√≥n: Crea mascota inicial con ID √∫nico generado
- Proceso: Actualiza nombre y cambia status de "available" a "sold"
- Variables: updatedPetName generado, transici√≥n de status documentada
- Validaciones: Cambios aplicados correctamente, campos no modificados preservados
- Salida: Mascota actualizada con nuevos datos confirmados y auditados

TEST 4: Consultar mascotas por estatus con validaci√≥n flexible (@findPetsByStatus)
- Endpoint: GET /pet/findByStatus?status=sold
- Entrada: Par√°metro query status="sold"
- Precondici√≥n: Crea y actualiza mascota a "sold" con delay para consistencia
- Comportamiento: Validaci√≥n flexible para manejar datos variables de la API demo
- Variables: Lista de mascotas, validaci√≥n de schema adaptable
- Validaciones: Estructura correcta, todos los pets tienen status="sold"
- Salida: Lista validada de mascotas "sold" con verificaci√≥n de consistencia

CARACTER√çSTICAS DE LA IMPLEMENTACI√ìN PROFESIONAL:
- Sintaxis nativa de Karate (sin step definitions externas)
- Cada escenario es completamente INDEPENDIENTE y autocontenido
- Patr√≥n create-first para tests de consulta, garantizando datos disponibles
- IDs √∫nicos generados din√°micamente usando timestamps para evitar conflictos
- Test data factory pattern para generaci√≥n consistente de datos
- Tags profesionales (@addPet, @getPetById, @updatePet, @findPetsByStatus)
- Validaci√≥n de schema flexible para manejar variabilidad de la API
- Documentaci√≥n completa de objetivos, reglas de negocio y outcomes esperados
- Configuraci√≥n por entornos centralizada en karate-config.js
- Delays estrat√©gicos para manejar consistencia eventual de datos

VARIABLES Y DATOS DE PRUEBA (TEST DATA FACTORY)
-----------------------------------------------
- baseTimestamp: java.lang.System.currentTimeMillis() (timestamp base para sesi√≥n)
- sessionPetId: Math.floor(baseTimestamp % 1000000) (ID base √∫nico por sesi√≥n)
- generateScenarioId(offset): Genera IDs √∫nicos por escenario evitando conflictos
- buildPetData(petId, name, status): Funci√≥n factory para crear objetos pet consistentes

DATOS GENERADOS DIN√ÅMICAMENTE:
- petId: √önico por escenario (sessionPetId + offset)
- petName: "API Test Pet - {petId}" o variaciones por escenario
- categoryId: 1 (fijo)
- categoryName: "Automation Test Category" (descriptivo)
- tagId: 100 (fijo)
- tagName: "automated-test" (identificador de tests automatizados)
- photoUrls: Array con URL √∫nica por pet
- baseUrl: "https://petstore.swagger.io/v2" (API demo endpoint)

EJECUCI√ìN POR ESCENARIOS INDIVIDUALES:
- Todos los tests: mvn test
- Solo creaci√≥n: mvn test -Dkarate.options="--tags @addPet"
- Solo consulta con patr√≥n create-first: mvn test -Dkarate.options="--tags @getPetById"
- Solo actualizaci√≥n: mvn test -Dkarate.options="--tags @updatePet"
- Solo b√∫squeda por status: mvn test -Dkarate.options="--tags @findPetsByStatus"
- Tests de smoke: mvn test -Dkarate.options="--tags @smoke"
- Tests CRUD completos: mvn test -Dkarate.options="--tags @create,@read,@update,@query"

COMANDOS √öTILES ADICIONALES
---------------------------

Para ejecutar tests con reportes detallados:
mvn clean test

Para ejecutar solo un escenario espec√≠fico por nombre:
mvn test -Dkarate.options="--name '1. A√±adir una mascota'"

Para ejecutar con logs m√°s detallados:
mvn test -Dkarate.env=dev

Para generar reportes HTML completos:
mvn test (los reportes se generan autom√°ticamente en target/karate-reports/)

RESOLUCI√ìN DE PROBLEMAS COMUNES
-------------------------------

1. Error de conexi√≥n a la API:
   - Verificar conexi√≥n a internet
   - Comprobar que https://petstore.swagger.io/v2 est√© disponible
   - Verificar que el endpoint responda: curl https://petstore.swagger.io/v2/pet/findByStatus?status=available

2. Error de compilaci√≥n Maven:
   - Verificar que Java 11+ est√© instalado: java -version
   - Verificar que Maven est√© instalado: mvn -version
   - Limpiar y recompilar: mvn clean compile

3. Tests fallan (Exit Code: 1):
   - Verificar que la API est√© disponible
   - Revisar logs detallados en la consola
   - Verificar reportes en target/surefire-reports/

4. Error "no step-definition method match found":
   - Este error indica mezcla de sintaxis Cucumber con Karate
   - En Karate solo usar: Given path, When method, Then status
   - No usar: Given I want to..., When I send..., Then I should...

5. Problemas de permisos:
   - Asegurar que el directorio target/ tenga permisos de escritura
   - En Windows: Ejecutar PowerShell como administrador si es necesario

CONTACTO Y SOPORTE
------------------
En caso de problemas, revisar:
1. Los logs en target/karate.log
2. Los reportes HTML en target/karate-reports/
3. La documentaci√≥n oficial de Karate: https://github.com/karatelabs/karate

NOTA IMPORTANTE
---------------
Este proyecto utiliza la API p√∫blica de PetStore (https://petstore.swagger.io/v2).
Los datos son reales pero temporales, por lo que pueden ser modificados o eliminados
por otros usuarios de la API.